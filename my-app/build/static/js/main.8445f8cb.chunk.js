(this["webpackJsonpmy-app"]=this["webpackJsonpmy-app"]||[]).push([[0],{80:function(e,t,c){},81:function(e,t,c){"use strict";c.r(t);var n=c(25),a=c.n(n),r=c(69),o=c.n(r),s=(c(78),c(70)),l=c(32),i=c(72),d=c(71),u=c(67),j=c(68),b=c(4),h=c(45),y=c(42),p=c(73),O=c(16);const m="http://localhost:8080/api/places";var f=()=>{const e=Object(n.useRef)(),t=Object(n.useRef)(),c=Object(n.useRef)(new j.a),a=Object(n.useRef)(new j.a),r=Object(n.useRef)(null),o=Object(n.useRef)([]),f=Object(n.useCallback)(e=>{const t=Object(b.e)([e.lon,e.lat]);return new h.a({geometry:new y.a(t),name:e.name,type:e.type,id:e.id})},[]),w=Object(n.useCallback)(async(e,t,n)=>{const[a,r]=e,o={name:t,type:n,latitude:r,longitude:a};try{const e=await fetch(m,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(o)});if(e.ok){const n=await e.json(),a=f(n);c.current.addFeature(a),alert("Location Added: ".concat(t))}else alert("Failed to add location.")}catch(s){console.error("Error adding location:",s)}},[f]),x=Object(n.useCallback)(async(e,t)=>{const[n,r]=e;c.current.clear(),a.current.clear();try{const o="".concat(m,"/nearby?lat=").concat(r,"&lon=").concat(n,"&radiusMeters=").concat(t),s=await fetch(o);if(s.ok){const t=await s.json(),n=new h.a({geometry:new y.a(Object(b.e)(e))});a.current.addFeature(n),t.forEach(e=>c.current.addFeature(f(e))),alert("Found ".concat(t.length," nearby places."))}else alert("Failed to find nearby places.")}catch(o){console.error("Error finding nearby:",o)}},[f]),g=Object(n.useCallback)(async e=>{const[t,c]=e;a.current.clear();const n=new h.a({geometry:new y.a(Object(b.e)(e))});a.current.addFeature(n);try{const e="".concat(m,"/nearest?lat=").concat(c,"&lon=").concat(t),n=await fetch(e);if(n.ok){const e=await n.json(),t=f(e);a.current.addFeature(t),alert("Nearest place: ".concat(e.name))}else alert("No nearby places found.")}catch(r){console.error("Error finding nearest:",r)}},[f]),k=Object(n.useCallback)(async(e,t)=>{const[c,n]=e,[r,o]=t;try{const s="".concat(m,"/distance?lat1=").concat(n,"&lon1=").concat(c,"&lat2=").concat(o,"&lon2=").concat(r),l=await fetch(s);if(l.ok){const c=await l.json(),n=document.getElementById("distance-output");n&&(n.innerText="Distance: ".concat(c.distance_km.toFixed(2)," km (").concat(c.distance_m.toFixed(0)," m)")),a.current.clear();const r=new h.a({geometry:new y.a(Object(b.e)(e))}),o=new h.a({geometry:new y.a(Object(b.e)(t))}),s=new h.a({geometry:new p.a([Object(b.e)(e),Object(b.e)(t)])});a.current.addFeatures([r,o,s])}else alert("Failed to calculate distance.")}catch(s){console.error("Error calculating distance:",s)}},[]),v=Object(n.useCallback)(e=>{r.current===e?r.current=null:r.current=e,a.current.clear(),o.current=[];const t=document.getElementById("distance-output");t&&(t.innerText="Distance: -")},[]);return Object(n.useEffect)(()=>{const n=new i.a({source:new d.a}),j=new u.a({source:c.current}),p=new u.a({source:a.current}),O=new s.a({target:e.current,layers:[n,j,p],view:new l.a({center:Object(b.e)([78.9629,20.5937]),zoom:5})});return t.current=O,O.on("click",e=>{const t=Object(b.n)(e.coordinate),c=r.current;if("add-location"===c){const e=prompt("Enter Name:"),c=prompt("Enter Type:");e&&c&&w(t,e,c)}else"find-nearest"===c?g(t):"distance-calc"===c&&(o.current.push(t),a.current.addFeature(new h.a({geometry:new y.a(e.coordinate)})),2===o.current.length&&(k(o.current[0],o.current[1]),o.current=[]))}),()=>O.setTarget(null)},[w,g,k]),Object(O.jsxs)("div",{style:{display:"flex",height:"100vh"},children:[Object(O.jsx)("div",{ref:e,style:{flex:3,height:"100%"}}),Object(O.jsxs)("div",{style:{flex:1,padding:"10px",backgroundColor:"#f2f2f2",overflowY:"auto"},children:[Object(O.jsx)("h2",{children:"GIS Services"}),Object(O.jsxs)("div",{style:{marginBottom:"15px"},children:[Object(O.jsx)("h3",{children:"Add Location (Click Map)"}),Object(O.jsx)("button",{onClick:()=>v("add-location"),children:"Activate Tool"})]}),Object(O.jsxs)("div",{style:{marginBottom:"15px"},children:[Object(O.jsx)("h3",{children:"Find Nearby Places"}),Object(O.jsx)("input",{type:"number",id:"nearby-radius",placeholder:"Radius in Meters",defaultValue:"5000"}),Object(O.jsx)("button",{onClick:()=>{const e=parseFloat(document.getElementById("nearby-radius").value);if(isNaN(e)||e<=0)return alert("Enter a valid radius.");x([78.9629,20.5937],e)},children:"Find Nearby"})]}),Object(O.jsxs)("div",{style:{marginBottom:"15px"},children:[Object(O.jsx)("h3",{children:"Find Nearest (Click Map)"}),Object(O.jsx)("button",{onClick:()=>v("find-nearest"),children:"Activate Tool"})]}),Object(O.jsxs)("div",{style:{marginBottom:"15px"},children:[Object(O.jsx)("h3",{children:"Distance Calculator (Click Map Twice)"}),Object(O.jsx)("button",{onClick:()=>v("distance-calc"),children:"Activate Tool"}),Object(O.jsx)("p",{id:"distance-output",children:"Distance: -"})]})]})]})};c(80);o.a.render(Object(O.jsx)(a.a.StrictMode,{children:Object(O.jsx)(f,{})}),document.getElementById("root"))}},[[81,1,2]]]);
//# sourceMappingURL=main.8445f8cb.chunk.js.map